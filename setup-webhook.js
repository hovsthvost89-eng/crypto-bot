require('dotenv').config();
const https = require('https');

const BOT_TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://your-app-name.vercel.app/api/webhook';

if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!');
    process.exit(1);
}

if (WEBHOOK_URL.includes('your-app-name')) {
    console.error('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ WEBHOOK_URL –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞—à–µ–≥–æ Vercel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!');
    console.log('–ü—Ä–∏–º–µ—Ä: https://crypto-bot-username.vercel.app/api/webhook');
    process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
function setWebhook() {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`;
    const data = JSON.stringify({
        url: WEBHOOK_URL
    });

    const options = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': data.length
        }
    };

    console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: ${WEBHOOK_URL}`);

    const req = https.request(url, options, (res) => {
        let response = '';
        
        res.on('data', (chunk) => {
            response += chunk;
        });
        
        res.on('end', () => {
            const result = JSON.parse(response);
            if (result.ok) {
                console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
                console.log('üìã –û–ø–∏—Å–∞–Ω–∏–µ:', result.description);
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', result.description);
            }
        });
    });

    req.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    });

    req.write(data);
    req.end();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
function getWebhookInfo() {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`;

    https.get(url, (res) => {
        let response = '';
        
        res.on('data', (chunk) => {
            response += chunk;
        });
        
        res.on('end', () => {
            const result = JSON.parse(response);
            if (result.ok) {
                console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
                console.log('URL:', result.result.url || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                console.log('–û–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', result.result.pending_update_count);
                if (result.result.last_error_date) {
                    console.log('–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:', new Date(result.result.last_error_date * 1000));
                    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', result.result.last_error_message);
                }
            }
        });
    });
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const command = process.argv[2];

if (command === 'set') {
    setWebhook();
} else if (command === 'info') {
    getWebhookInfo();
} else {
    console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('node setup-webhook.js set  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook');
    console.log('node setup-webhook.js info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook');
}