/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç —Å —Ä–æ—Å—Ç–æ–º >10% –∑–∞ –¥–µ–Ω—å (–º–æ–æ–Ω–µ—Ä—ã)
 */

const https = require('https');

class MoonersService {
    constructor() {
        this.cache = new Map();
        this.cacheTime = 180000; // 3 –º–∏–Ω—É—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ –º–µ–Ω—è—é—Ç—Å—è)
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã —Å —Ä–æ—Å—Ç–æ–º >10% –∑–∞ –¥–µ–Ω—å
     */
    async getMooners(minGrowth = 10) {
        const cacheKey = `mooners_${minGrowth}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTime) {
                return cached.data;
            }
        }

        try {
            console.log(`üöÄ –ü–æ–∏—Å–∫ –º–æ–æ–Ω–µ—Ä–æ–≤ —Å —Ä–æ—Å—Ç–æ–º >${minGrowth}% –∑–∞ –¥–µ–Ω—å...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [binanceMooners, bybitMooners, okxMooners] = await Promise.allSettled([
                this.getBinanceMooners(minGrowth),
                this.getBybitMooners(minGrowth), 
                this.getOKXMooners(minGrowth)
            ]);

            const allMooners = [];
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Binance
            if (binanceMooners.status === 'fulfilled' && binanceMooners.value) {
                allMooners.push(...binanceMooners.value.map(coin => ({
                    ...coin,
                    exchange: 'binance'
                })));
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Bybit
            if (bybitMooners.status === 'fulfilled' && bybitMooners.value) {
                allMooners.push(...bybitMooners.value.map(coin => ({
                    ...coin,
                    exchange: 'bybit'
                })));
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OKX
            if (okxMooners.status === 'fulfilled' && okxMooners.value) {
                allMooners.push(...okxMooners.value.map(coin => ({
                    ...coin,
                    exchange: 'okx'
                })));
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–æ—Å—Ç—É (—É–±—ã–≤–∞–Ω–∏–µ)
            const sortedMooners = allMooners
                .filter(coin => coin.change1h >= minGrowth)
                .sort((a, b) => b.change1h - a.change1h)
                .slice(0, 20); // –¢–æ–ø-20 –º–æ–æ–Ω–µ—Ä–æ–≤

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, {
                data: sortedMooners,
                timestamp: Date.now()
            });

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${sortedMooners.length} –º–æ–æ–Ω–µ—Ä–æ–≤`);
            return sortedMooners;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–æ–Ω–µ—Ä–æ–≤:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç–∞—Ö');
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–æ–æ–Ω–µ—Ä—ã —Å Binance
     */
    async getBinanceMooners(minGrowth) {
        return new Promise((resolve, reject) => {
            // Binance 24hr ticker statistics
            const url = 'https://api.binance.com/api/v3/ticker/24hr';
            
            https.get(url, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    try {
                        const json = JSON.parse(data);
                        
                        // –§–∏–ª—å—Ç—Ä—É–µ–º USDT –ø–∞—Ä—ã —Å —Ä–æ—Å—Ç–æ–º >minGrowth%
                        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Binance –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1h –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ,
                        // –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º 24h –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
                        const mooners = json
                            .filter(ticker => {
                                return ticker.symbol.endsWith('USDT') && 
                                       parseFloat(ticker.priceChangePercent) >= minGrowth &&
                                       parseFloat(ticker.volume) > 100000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                            })
                            .map(ticker => ({
                                symbol: ticker.symbol.replace('USDT', ''),
                                pair: ticker.symbol,
                                price: parseFloat(ticker.lastPrice),
                                change1h: parseFloat(ticker.priceChangePercent), // 24h –¥–∞–Ω–Ω—ã–µ
                                volume: parseFloat(ticker.volume),
                                high: parseFloat(ticker.highPrice),
                                low: parseFloat(ticker.lowPrice)
                            }))
                            .slice(0, 15); // –¢–æ–ø-15 —Å Binance

                        resolve(mooners);
                    } catch (error) {
                        reject(error);
                    }
                });
            }).on('error', (error) => {
                reject(error);
            });
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–æ–æ–Ω–µ—Ä—ã —Å Bybit
     */
    async getBybitMooners(minGrowth) {
        return new Promise((resolve, reject) => {
            // Bybit tickers
            const url = 'https://api.bybit.com/v5/market/tickers?category=spot';
            
            https.get(url, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    try {
                        const json = JSON.parse(data);
                        const tickers = json?.result?.list || [];
                        
                        // –§–∏–ª—å—Ç—Ä—É–µ–º USDT –ø–∞—Ä—ã —Å —Ä–æ—Å—Ç–æ–º
                        const mooners = tickers
                            .filter(ticker => {
                                const change = parseFloat(ticker.price24hPcnt) * 100;
                                return ticker.symbol.endsWith('USDT') && 
                                       change >= minGrowth &&
                                       parseFloat(ticker.volume24h) > 50000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                            })
                            .map(ticker => ({
                                symbol: ticker.symbol.replace('USDT', ''),
                                pair: ticker.symbol,
                                price: parseFloat(ticker.lastPrice),
                                change1h: parseFloat(ticker.price24hPcnt) * 100, // 24h –¥–∞–Ω–Ω—ã–µ
                                volume: parseFloat(ticker.volume24h),
                                high: parseFloat(ticker.highPrice24h),
                                low: parseFloat(ticker.lowPrice24h)
                            }))
                            .slice(0, 15);

                        resolve(mooners);
                    } catch (error) {
                        reject(error);
                    }
                });
            }).on('error', (error) => {
                reject(error);
            });
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–æ–æ–Ω–µ—Ä—ã —Å OKX
     */
    async getOKXMooners(minGrowth) {
        return new Promise((resolve, reject) => {
            const url = 'https://okx.com/api/v5/market/tickers?instType=SPOT';
            
            const req = https.get(url, { timeout: 15000 }, (res) => {
                let data = '';
                res.on('data', (chunk) => { data += chunk; });
                res.on('end', () => {
                    try {
                        if (res.statusCode !== 200) {
                            console.warn(`OKX mooners API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${res.statusCode}`);
                            resolve([]);
                            return;
                        }
                        
                        const json = JSON.parse(data);
                        const tickers = json?.data || [];
                        
                        if (!Array.isArray(tickers)) {
                            console.warn('OKX mooners API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                            resolve([]);
                            return;
                        }
                        
                        const mooners = tickers
                            .filter(ticker => {
                                try {
                                    const last = parseFloat(ticker.last) || 0;
                                    const open = parseFloat(ticker.open24h) || 0;
                                    const change = open > 0 ? ((last - open) / open) * 100 : 0;
                                    const volume = parseFloat(ticker.vol24h) || 0;
                                    
                                    return ticker.instId && ticker.instId.endsWith('-USDT') && 
                                           change >= minGrowth &&
                                           volume > 10000;
                                } catch (e) {
                                    return false;
                                }
                            })
                            .map(ticker => {
                                try {
                                    const last = parseFloat(ticker.last) || 0;
                                    const open = parseFloat(ticker.open24h) || 0;
                                    const change = open > 0 ? ((last - open) / open) * 100 : 0;
                                    
                                    return {
                                        symbol: ticker.instId.replace('-USDT', ''),
                                        pair: ticker.instId,
                                        price: last,
                                        change1h: change,
                                        volume: parseFloat(ticker.vol24h) || 0,
                                        high: parseFloat(ticker.high24h) || 0,
                                        low: parseFloat(ticker.low24h) || 0
                                    };
                                } catch (e) {
                                    return null;
                                }
                            })
                            .filter(coin => coin !== null)
                            .slice(0, 15);

                        resolve(mooners);
                    } catch (error) {
                        console.warn('OKX mooners –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
                        resolve([]);
                    }
                });
            });
            
            req.on('error', (error) => {
                console.warn('OKX mooners –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
                resolve([]);
            });
            
            req.on('timeout', () => {
                console.warn('OKX mooners —Ç–∞–π–º–∞—É—Ç');
                req.destroy();
                resolve([]);
            });
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
     */
    formatMoonersMessage(mooners, minGrowth = 10) {
        if (!mooners || mooners.length === 0) {
            return `üöÄ *–ú–æ–æ–Ω–µ—Ä—ã (+${minGrowth}% –∑–∞ –¥–µ–Ω—å)*\n\nüò¥ –°–µ–π—á–∞—Å –Ω–µ—Ç –º–æ–Ω–µ—Ç —Å —Ä–æ—Å—Ç–æ–º –±–æ–ª–µ–µ ${minGrowth}%.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–Ω–∏–∑—å—Ç–µ –ø–æ—Ä–æ–≥ —Ä–æ—Å—Ç–∞.`;
        }

        let message = `üöÄ *–ú–æ–æ–Ω–µ—Ä—ã (+${minGrowth}% –∑–∞ –¥–µ–Ω—å)*\n\n`;
        message += `üéØ –ù–∞–π–¥–µ–Ω–æ ${mooners.length} —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç:\n\n`;

        mooners.forEach((coin, index) => {
            const exchangeEmoji = this.getExchangeEmoji(coin.exchange);
            const changeEmoji = this.getChangeEmoji(coin.change1h);
            const priceFormatted = this.formatPrice(coin.price);
            
            message += `${index + 1}. ${exchangeEmoji} *${coin.symbol}* ${changeEmoji}\n`;
            message += `   üí∞ –¶–µ–Ω–∞: $${priceFormatted}\n`;
            message += `   üìà –†–æ—Å—Ç –∑–∞ –¥–µ–Ω—å: +${coin.change1h.toFixed(2)}%\n`;
            
            if (coin.volume > 0) {
                message += `   üìä –û–±—ä–µ–º: ${this.formatVolume(coin.volume)}\n`;
            }
            message += '\n';
        });

        message += '‚ö†Ô∏è *–†–∏—Å–∫–∏:*\n';
        message += '‚Ä¢ –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n'; 
        message += '‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã —Ä–µ–∑–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏\n';
        message += '‚Ä¢ –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã\n\n';
        message += 'üí° –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã';

        return message;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –±–∏—Ä–∂–∏
     */
    getExchangeEmoji(exchange) {
        const emojis = {
            'binance': '‚ö´',
            'bybit': '‚ö´', 
            'okx': '‚ö´'
        };
        return emojis[exchange] || '‚ö´';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    getChangeEmoji(change) {
        if (change >= 50) return 'üöÄüöÄüöÄ';
        if (change >= 30) return 'üöÄüöÄ';
        if (change >= 20) return 'üöÄ';
        if (change >= 10) return 'üìà';
        return '‚ÜóÔ∏è';
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É
     */
    formatPrice(price) {
        if (price >= 1) {
            return price.toFixed(4);
        } else {
            return price.toFixed(8);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–º
     */
    formatVolume(volume) {
        if (volume >= 1000000) {
            return `${(volume / 1000000).toFixed(1)}M`;
        } else if (volume >= 1000) {
            return `${(volume / 1000).toFixed(1)}K`;
        } else {
            return volume.toFixed(0);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
     */
    clearCache() {
        this.cache.clear();
        console.log('üóëÔ∏è –ö—ç—à –º–æ–æ–Ω–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω');
    }
}

module.exports = MoonersService;