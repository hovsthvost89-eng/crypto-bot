/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
 */

const https = require('https');

class NewCoinsService {
    constructor() {
        this.cache = new Map();
        this.cacheTime = 300000; // 5 –º–∏–Ω—É—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂
     */
    async getNewCoins() {
        const cacheKey = 'new_coins_1h';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTime) {
                return cached.data;
            }
        }

        try {
            console.log('üîç –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç...');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [binanceNew, bybitNew, okxNew] = await Promise.allSettled([
                this.getBinanceNewCoins(),
                this.getBybitNewCoins(), 
                this.getOKXNewCoins()
            ]);

            const allNewCoins = [];
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Binance
            if (binanceNew.status === 'fulfilled' && binanceNew.value) {
                allNewCoins.push(...binanceNew.value.map(coin => ({
                    ...coin,
                    exchange: 'binance'
                })));
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Bybit
            if (bybitNew.status === 'fulfilled' && bybitNew.value) {
                allNewCoins.push(...bybitNew.value.map(coin => ({
                    ...coin,
                    exchange: 'bybit'
                })));
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OKX
            if (okxNew.status === 'fulfilled' && okxNew.value) {
                allNewCoins.push(...okxNew.value.map(coin => ({
                    ...coin,
                    exchange: 'okx'
                })));
            }

            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª—É
            const uniqueCoins = this.removeDuplicates(allNewCoins);
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, {
                data: uniqueCoins,
                timestamp: Date.now()
            });

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${uniqueCoins.length} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç`);
            return uniqueCoins;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö');
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã —Å Binance
     */
    async getBinanceNewCoins() {
        return new Promise((resolve, reject) => {
            const url = 'https://api.binance.com/api/v3/ticker/24hr';
            
            https.get(url, (res) => {
                let data = '';
                res.on('data', (chunk) => { data += chunk; });
                res.on('end', () => {
                    try {
                        const json = JSON.parse(data);
                        
                        const smallCapCoins = json
                            .filter(ticker => {
                                const volume = parseFloat(ticker.volume);
                                const price = parseFloat(ticker.lastPrice);
                                const symbol = ticker.symbol;
                                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –≤ —Ñ–∏–ª—å—Ç—Ä
                                const isTargetPair = symbol.endsWith('USDT') && (
                                    symbol.startsWith('BTC') || symbol.startsWith('ETH') ||
                                    symbol.startsWith('TRX') || symbol.startsWith('TON') ||
                                    symbol.startsWith('USDC') || symbol.startsWith('BNB') ||
                                    symbol.startsWith('SOL') || symbol.startsWith('XRP') ||
                                    symbol.startsWith('ADA')
                                );
                                return isTargetPair && 
                                       volume > 1000 && volume < 500000 &&
                                       price > 0.000001 && price < 100;
                            })
                            .map(ticker => ({
                                symbol: ticker.symbol.replace('USDT', ''),
                                pair: ticker.symbol,
                                price: parseFloat(ticker.lastPrice),
                                change24h: parseFloat(ticker.priceChangePercent),
                                volume24h: parseFloat(ticker.volume),
                                high24h: parseFloat(ticker.highPrice),
                                low24h: parseFloat(ticker.lowPrice)
                            }))
                            .slice(0, 20);

                        resolve(smallCapCoins);
                    } catch (error) {
                        reject(error);
                    }
                });
            }).on('error', reject);
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã —Å Bybit  
     */
    async getBybitNewCoins() {
        return new Promise((resolve, reject) => {
            const url = 'https://api.bybit.com/v5/market/tickers?category=spot';
            
            https.get(url, (res) => {
                let data = '';
                res.on('data', (chunk) => { data += chunk; });
                res.on('end', () => {
                    try {
                        const json = JSON.parse(data);
                        const tickers = json?.result?.list || [];
                        
                        const smallCapCoins = tickers
                            .filter(ticker => {
                                const volume = parseFloat(ticker.volume24h);
                                const price = parseFloat(ticker.lastPrice);
                                const symbol = ticker.symbol;
                                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –≤ —Ñ–∏–ª—å—Ç—Ä
                                const isTargetPair = symbol.endsWith('USDT') && (
                                    symbol.startsWith('BTC') || symbol.startsWith('ETH') ||
                                    symbol.startsWith('TRX') || symbol.startsWith('TON') ||
                                    symbol.startsWith('USDC') || symbol.startsWith('BNB') ||
                                    symbol.startsWith('SOL') || symbol.startsWith('XRP') ||
                                    symbol.startsWith('ADA')
                                );
                                return isTargetPair && 
                                       volume > 1000 && volume < 300000 &&
                                       price > 0.000001 && price < 100;
                            })
                            .map(ticker => ({
                                symbol: ticker.symbol.replace('USDT', ''),
                                pair: ticker.symbol,
                                price: parseFloat(ticker.lastPrice),
                                change24h: parseFloat(ticker.price24hPcnt) * 100,
                                volume24h: parseFloat(ticker.volume24h),
                                high24h: parseFloat(ticker.highPrice24h),
                                low24h: parseFloat(ticker.lowPrice24h)
                            }))
                            .slice(0, 20);

                        resolve(smallCapCoins);
                    } catch (error) {
                        reject(error);
                    }
                });
            }).on('error', reject);
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã —Å OKX
     */
    async getOKXNewCoins() {
        return new Promise((resolve, reject) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint —Å –±–æ–ª—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            const url = 'https://okx.com/api/v5/market/tickers?instType=SPOT';
            
            const req = https.get(url, { timeout: 15000 }, (res) => {
                let data = '';
                res.on('data', (chunk) => { data += chunk; });
                res.on('end', () => {
                    try {
                        if (res.statusCode !== 200) {
                            console.warn(`OKX API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${res.statusCode}`);
                            resolve([]); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
                            return;
                        }
                        
                        const json = JSON.parse(data);
                        const tickers = json?.data || [];
                        
                        if (!Array.isArray(tickers)) {
                            console.warn('OKX API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                            resolve([]);
                            return;
                        }
                        
                        const smallCapCoins = tickers
                            .filter(ticker => {
                                try {
                                    const volume = parseFloat(ticker.vol24h) || 0;
                                    const price = parseFloat(ticker.last) || 0;
                                    return ticker.instId && ticker.instId.endsWith('-USDT') && 
                                           volume > 1000 && volume < 200000 &&
                                           price > 0.000001 && price < 100;
                                } catch (e) {
                                    return false;
                                }
                            })
                            .map(ticker => {
                                try {
                                    const last = parseFloat(ticker.last) || 0;
                                    const open = parseFloat(ticker.open24h) || 0;
                                    const change = open > 0 ? ((last - open) / open) * 100 : 0;
                                    
                                    return {
                                        symbol: ticker.instId.replace('-USDT', ''),
                                        pair: ticker.instId,
                                        price: last,
                                        change24h: change,
                                        volume24h: parseFloat(ticker.vol24h) || 0,
                                        high24h: parseFloat(ticker.high24h) || 0,
                                        low24h: parseFloat(ticker.low24h) || 0
                                    };
                                } catch (e) {
                                    return null;
                                }
                            })
                            .filter(coin => coin !== null)
                            .slice(0, 20);

                        resolve(smallCapCoins);
                    } catch (error) {
                        console.warn('OKX –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
                        resolve([]); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                    }
                });
            });
            
            req.on('error', (error) => {
                console.warn('OKX –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
                resolve([]); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            });
            
            req.on('timeout', () => {
                console.warn('OKX —Ç–∞–π–º–∞—É—Ç');
                req.destroy();
                resolve([]);
            });
        });
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª—É –º–æ–Ω–µ—Ç—ã
     */
    removeDuplicates(coins) {
        const seen = new Set();
        return coins.filter(coin => {
            if (seen.has(coin.symbol)) {
                return false;
            }
            seen.add(coin.symbol);
            return true;
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
     */
    formatNewCoinsMessage(newCoins) {
        if (!newCoins || newCoins.length === 0) {
            return 'üÜï *–ú–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã*\n\nüò¥ –°–µ–π—á–∞—Å –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–æ–Ω–µ—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        }

        let message = `üÜï *–ú–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã*\n\n`;
        message += `üéÜ –ù–∞–π–¥–µ–Ω–æ ${newCoins.length} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç:\n\n`;

        newCoins.forEach((coin, index) => {
            const exchangeEmoji = this.getExchangeEmoji(coin.exchange);
            const changeEmoji = coin.change24h >= 0 ? 'üü¢' : 'üî¥';
            const priceFormatted = this.formatPrice(coin.price);
            
            message += `${index + 1}. ${exchangeEmoji} *${coin.symbol}* ${changeEmoji}\n`;
            message += `   üí∞ –¶–µ–Ω–∞: $${priceFormatted}\n`;
            message += `   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${coin.change24h >= 0 ? '+' : ''}${coin.change24h.toFixed(2)}%\n`;
            message += `   üìä –û–±—ä–µ–º: ${this.formatVolume(coin.volume24h)}\n\n`;
        });

        message += '‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ú–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã —á–∞—Å—Ç–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã!\n';
        message += 'üí° –í—Å–µ–≥–¥–∞ –∏–∑—É—á–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.';

        return message;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –±–∏—Ä–∂–∏
     */
    getExchangeEmoji(exchange) {
        return '‚ö´'; // –ß–µ—Ä–Ω—ã–µ –∫—Ä—É–∂–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É
     */
    formatPrice(price) {
        if (price >= 1) {
            return price.toFixed(4);
        } else {
            return price.toFixed(8);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–º
     */
    formatVolume(volume) {
        if (volume >= 1000000) {
            return `${(volume / 1000000).toFixed(1)}M`;
        } else if (volume >= 1000) {
            return `${(volume / 1000).toFixed(1)}K`;
        } else {
            return volume.toFixed(0);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
     */
    getTimeAgo(timestamp) {
        const now = Date.now();
        const diffMs = now - timestamp;
        
        const minutes = Math.floor(diffMs / (1000 * 60));
        const hours = Math.floor(minutes / 60);
        
        if (hours > 0) {
            return `${hours} —á. –Ω–∞–∑–∞–¥`;
        } else if (minutes > 0) {
            return `${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
        } else {
            return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
     */
    clearCache() {
        this.cache.clear();
        console.log('üóëÔ∏è –ö—ç—à –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç –æ—á–∏—â–µ–Ω');
    }
}

module.exports = NewCoinsService;