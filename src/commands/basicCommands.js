/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–∑–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
 */

const { getAllStats } = require('../../exchange');
const { 
    formatCompactStats, 
    formatTableStats, 
    formatError, 
    formatLoadingMessage,
    getHelpMessage,
    getWelcomeWithMenu,
    getMainMenuKeyboard
} = require('../../ui');

class BasicCommands {
    constructor(bot) {
        this.bot = bot;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    registerCommands() {
        this.bot.onText(/\/start/, (msg) => this.handleStart(msg));
        this.bot.onText(/\/help/, (msg) => this.handleHelp(msg));
        this.bot.onText(/\/compact/, (msg) => this.handleCompact(msg));
        this.bot.onText(/\/table/, (msg) => this.handleTable(msg));
        this.bot.onText(/\/status/, (msg) => this.handleStatus(msg));
    }

    // –ö–æ–º–∞–Ω–¥–∞ /start
    async handleStart(msg) {
        const chatId = msg.chat.id;
        const welcomeMessage = getWelcomeWithMenu();
        const keyboard = getMainMenuKeyboard();
        
        await this.bot.sendMessage(chatId, welcomeMessage, { 
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    // –ö–æ–º–∞–Ω–¥–∞ /help
    async handleHelp(msg) {
        const chatId = msg.chat.id;
        const helpMessage = getHelpMessage();
        const keyboard = getMainMenuKeyboard();
        
        await this.bot.sendMessage(chatId, helpMessage, { 
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    // –ö–æ–º–∞–Ω–¥–∞ /compact - –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
    async handleCompact(msg) {
        const chatId = msg.chat.id;
        
        const loadingMsg = await this.bot.sendMessage(chatId, formatLoadingMessage(), { parse_mode: 'Markdown' });
        
        try {
            const data = await getAllStats(['BTC', 'ETH', 'TRX', 'TON', 'USDC', 'BNB', 'SOL', 'XRP', 'ADA']);
            const formattedMessage = formatCompactStats(data);
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            await this.bot.sendMessage(chatId, formattedMessage, { 
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            const errorMessage = formatError(error?.message ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            await this.bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ /table - —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    async handleTable(msg) {
        const chatId = msg.chat.id;
        
        const loadingMsg = await this.bot.sendMessage(chatId, formatLoadingMessage(), { parse_mode: 'Markdown' });
        
        try {
            const data = await getAllStats(['BTC', 'ETH', 'TRX', 'TON', 'USDC', 'BNB', 'SOL', 'XRP', 'ADA']);
            const formattedMessage = formatTableStats(data);
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            await this.bot.sendMessage(chatId, formattedMessage, { 
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            const errorMessage = formatError(error?.message ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            await this.bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    async handleStatus(msg) {
        const chatId = msg.chat.id;
        const uptime = process.uptime();
        const uptimeString = `${Math.floor(uptime / 60)} –º–∏–Ω—É—Ç ${Math.floor(uptime % 60)} —Å–µ–∫—É–Ω–¥`;
        
        const statusMessage = `‚úÖ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –ê–∫—Ç–∏–≤–µ–Ω*

‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptimeString}
üîÑ –†–µ–∂–∏–º: Polling
üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ

üõ†Ô∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ Node.js: ${process.version}
‚Ä¢ Telegram Bot API: –ü–æ–¥–∫–ª—é—á–µ–Ω
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 7 –±–∏—Ä–∂
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 9 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç`;
        
        const keyboard = getMainMenuKeyboard();
        
        await this.bot.sendMessage(chatId, statusMessage, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    handleTextMessage(msg) {
        const chatId = msg.chat.id;
        const messageText = msg.text;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if (messageText && messageText.startsWith('/')) {
            return;
        }
        
        // –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (messageText) {
            const responseMessage = `ü§î –Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å
/help - –ü–æ–º–æ—â—å  
/status - –°—Ç–∞—Ç—É—Å

üöß –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏.`;
            
            this.bot.sendMessage(chatId, responseMessage);
        }
    }
}

module.exports = BasicCommands;