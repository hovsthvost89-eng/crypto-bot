/**
 * –ú–æ–¥—É–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∏—Ä–∂ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
 */

const BinanceExchange = require('./exchanges/binanceExchange');
const BybitExchange = require('./exchanges/bybitExchange');
const OKXExchange = require('./exchanges/okxExchange');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∏—Ä–∂
const { getAllStats: getOriginalStats } = require('../exchange');

class ExchangeManager {
    constructor() {
        // –ù–æ–≤—ã–µ –º–æ–¥—É–ª—å–Ω—ã–µ –±–∏—Ä–∂–∏
        this.modularExchanges = {
            binance: new BinanceExchange(),
            bybit: new BybitExchange(),
            okx: new OKXExchange(),
        };

        // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
        this.supportedAssets = ['BTC', 'ETH', 'TRX', 'TON'];
        this.allExchanges = ['binance', 'bybit', 'okx', 'kraken', 'mexc', 'htx', 'poloniex'];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂
     */
    async getAllStats(assets = ['TON', 'TRX', 'ETH', 'BTC']) {
        console.log('üîÑ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂ (–º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∫–∞–∫ fallback –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—å–Ω—ã–µ –±–∏—Ä–∂–∏
        const results = await getOriginalStats(assets);
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');
        return results;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å –º–æ–¥—É–ª—å–Ω—ã—Ö –±–∏—Ä–∂ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    async getModularStats(assets = ['TON', 'TRX', 'ETH', 'BTC']) {
        console.log('üîÑ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ —Å –º–æ–¥—É–ª—å–Ω—ã—Ö –±–∏—Ä–∂...');
        
        const jobs = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö –±–∏—Ä–∂
        for (const exchangeName of Object.keys(this.modularExchanges)) {
            for (const asset of assets) {
                const exchange = this.modularExchanges[exchangeName];
                jobs.push(exchange.fetchAsset(asset));
            }
        }
        
        try {
            const results = await Promise.allSettled(jobs);
            const processedResults = results.map(result => {
                if (result.status === 'fulfilled') {
                    return result.value;
                } else {
                    console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', result.reason);
                    return {
                        exchange: 'unknown',
                        asset: 'unknown',
                        price: null,
                        changePct24h: null,
                        high24h: null,
                        low24h: null,
                        volume24h: null,
                        note: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
                    };
                }
            });

            console.log(`‚úÖ –ú–æ–¥—É–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã (${processedResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`);
            return processedResults;
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥—É–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–∏—Ä–∂
     */
    getSupportedExchanges() {
        return {
            modular: Object.keys(this.modularExchanges),
            all: this.allExchanges
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
     */
    getSupportedAssets() {
        return this.supportedAssets;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏—Ä–∂–∏
     */
    async testExchange(exchangeName, asset = 'BTC') {
        if (!this.modularExchanges[exchangeName]) {
            throw new Error(`–ë–∏—Ä–∂–∞ ${exchangeName} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ`);
        }

        const exchange = this.modularExchanges[exchangeName];
        const startTime = Date.now();
        
        try {
            const result = await exchange.fetchAsset(asset);
            const duration = Date.now() - startTime;
            
            return {
                exchange: exchangeName,
                asset,
                success: result.price !== null,
                duration,
                result
            };
        } catch (error) {
            const duration = Date.now() - startTime;
            return {
                exchange: exchangeName,
                asset,
                success: false,
                duration,
                error: error.message
            };
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const exchangeManager = new ExchangeManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async function getAllStats(assets) {
    return await exchangeManager.getAllStats(assets);
}

module.exports = {
    getAllStats,
    ExchangeManager,
    exchangeManager
};