/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback queries (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
 */

const { getAllStats } = require('../../exchange');
const NewCoinsService = require('../services/newCoinsService');
const MoonersService = require('../services/moonersService');
const ListingsWatcherService = require('../services/listingsWatcherService');
const { 
    formatCompactStats, 
    formatTableStats, 
    formatError, 
    getHelpMessage,
    getWelcomeWithMenu,
    getMenuMessage,
    getMainMenuKeyboard
} = require('../../ui');

class CallbackHandler {
    constructor(bot) {
        this.bot = bot;
        this.newCoinsService = new NewCoinsService();
        this.moonersService = new MoonersService();
        this.listingsWatcher = new ListingsWatcherService();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
        this.listingsWatcher.startWatching();
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries
    async handleCallback(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const data = callbackQuery.data;
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å loading
        await this.bot.answerCallbackQuery(callbackQuery.id);
        
        try {
            switch (data) {
                case 'compact':
                    await this.handleCompact(chatId);
                    break;
                case 'table':
                    await this.handleTable(chatId);
                    break;
                case 'test':
                    await this.handleTest(chatId);
                    break;
                case 'help':
                    await this.handleHelp(chatId);
                    break;
                case 'status':
                    await this.handleStatus(chatId);
                    break;
                case 'new_coins':
                    await this.handleNewCoins(chatId);
                    break;
                case 'new_listings':
                    await this.handleNewListings(chatId);
                    break;
                case 'mooners':
                    await this.handleMooners(chatId);
                    break;
                case 'clear':
                case 'menu':
                    await this.handleClearChat(chatId, messageId);
                    break;
                default:
                    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:', data);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error);
            
            try {
                await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
                    reply_markup: getMainMenuKeyboard()
                });
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e);
            }
        }
    }

    // –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
    async handleCompact(chatId) {
        const loadingMsg = await this.bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É...', { parse_mode: 'Markdown' });
        
        try {
            const data = await getAllStats(['BTC', 'ETH', 'TRX', 'TON', 'USDC', 'BNB', 'SOL', 'XRP', 'ADA']);
            const formattedMessage = formatCompactStats(data);
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            await this.bot.sendMessage(chatId, formattedMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            const errorMessage = formatError(error?.message ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.sendMessage(chatId, errorMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    }

    // –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    async handleTable(chatId) {
        const loadingMsg = await this.bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–ª–∏—Ü—É...', { parse_mode: 'Markdown' });
        
        try {
            const data = await getAllStats(['BTC', 'ETH', 'TRX', 'TON', 'USDC', 'BNB', 'SOL', 'XRP', 'ADA']);
            const formattedMessage = formatTableStats(data);
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            await this.bot.sendMessage(chatId, formattedMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ç–∞–±–ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            const errorMessage = formatError(error?.message ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.sendMessage(chatId, errorMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    }

    // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    async handleTest(chatId) {
        const loadingMsg = await this.bot.sendMessage(chatId, '‚è≥ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...', { parse_mode: 'Markdown' });
        
        try {
            const startTime = Date.now();
            const testData = await getAllStats(['BTC']);
            const duration = Date.now() - startTime;
            
            const workingExchanges = testData.filter(item => item.price !== null);
            
            let message = `üìä *–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n`;
            message += `‚è±Ô∏è –í—Ä–µ–º—è: ${(duration/1000).toFixed(1)}s\n`;
            message += `‚úÖ –†–∞–±–æ—Ç–∞—é—Ç: ${workingExchanges.length}/7 –±–∏—Ä–∂\n\n`;
            
            workingExchanges.forEach(item => {
                const emoji = '‚ö´'; // –ß–µ—Ä–Ω—ã–π –∫—Ä—É–∂–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –±–∏—Ä–∂
                message += `${emoji} ${item.exchange.toUpperCase()}: $${Number(item.price).toLocaleString()}\n`;
            });
            
            const failedExchanges = testData.filter(item => item.price === null);
            if (failedExchanges.length > 0) {
                message += `\n‚ùå –ù–µ –æ—Ç–≤–µ—á–∞—é—Ç: ${failedExchanges.map(e => e.exchange).join(', ')}`;
            }
            
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            await this.bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞*\n\n${error.message}`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    }

    // –ü–æ–º–æ—â—å
    async handleHelp(chatId) {
        const helpMessage = getHelpMessage();
        const keyboard = getMainMenuKeyboard();
        
        await this.bot.sendMessage(chatId, helpMessage, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    // –°—Ç–∞—Ç—É—Å
    async handleStatus(chatId) {
        const uptime = process.uptime();
        const uptimeString = `${Math.floor(uptime / 60)} –º–∏–Ω—É—Ç ${Math.floor(uptime % 60)} —Å–µ–∫—É–Ω–¥`;
        
        const statusMessage = `‚úÖ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –ê–∫—Ç–∏–≤–µ–Ω*\n\n‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptimeString}\nüîÑ –†–µ–∂–∏–º: Polling\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n\nüõ†Ô∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n‚Ä¢ Node.js: ${process.version}\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 7 –±–∏—Ä–∂\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 9 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç`;
        const keyboard = getMainMenuKeyboard();
        
        await this.bot.sendMessage(chatId, statusMessage, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    // –ù–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    async handleNewCoins(chatId) {
        const loadingMsg = await this.bot.sendMessage(chatId, '‚è≥ –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç...', { parse_mode: 'Markdown' });
        
        try {
            const newCoins = await this.newCoinsService.getNewCoins();
            const formattedMessage = this.newCoinsService.formatNewCoinsMessage(newCoins);
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            await this.bot.sendMessage(chatId, formattedMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç:', error);
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç*\n\n${error.message}`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    }

    // –ù–æ–≤—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏ - —Ä–µ–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    async handleNewListings(chatId) {
        const loadingMsg = await this.bot.sendMessage(chatId, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏...', { parse_mode: 'Markdown' });
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∏
            const formattedMessage = this.listingsWatcher.formatListingsMessage();
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            await this.bot.sendMessage(chatId, formattedMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–æ–≤:', error);
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–æ–≤*\n\n${error.message}`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    }

    // –ú–æ–æ–Ω–µ—Ä—ã - –º–æ–Ω–µ—Ç—ã —Å —Ä–æ—Å—Ç–æ–º >10% –∑–∞ –¥–µ–Ω—å
    async handleMooners(chatId) {
        const loadingMsg = await this.bot.sendMessage(chatId, '‚è≥ –ü–æ–∏—Å–∫ –º–æ–æ–Ω–µ—Ä–æ–≤ (+10% –∑–∞ –¥–µ–Ω—å)...', { parse_mode: 'Markdown' });
        
        try {
            const mooners = await this.moonersService.getMooners(10);
            const formattedMessage = this.moonersService.formatMoonersMessage(mooners, 10);
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            await this.bot.sendMessage(chatId, formattedMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–æ–Ω–µ—Ä–æ–≤:', error);
            await this.bot.deleteMessage(chatId, loadingMsg.message_id);
            const keyboard = getMainMenuKeyboard();
            
            await this.bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–æ–Ω–µ—Ä–æ–≤*\n\n${error.message}`, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
    async handleClearChat(chatId, messageId) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π
            const currentMessageId = messageId;
            const messagesToDelete = [];
            
            for (let i = 0; i < 30; i++) {
                messagesToDelete.push(currentMessageId - i);
            }
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for (const msgId of messagesToDelete) {
                try {
                    await this.bot.deleteMessage(chatId, msgId);
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
                }
            }
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é:', e.message);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
        const welcomeMessage = getWelcomeWithMenu();
        const keyboard = getMainMenuKeyboard();
        
        await this.bot.sendMessage(chatId, welcomeMessage, { 
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
}

module.exports = CallbackHandler;